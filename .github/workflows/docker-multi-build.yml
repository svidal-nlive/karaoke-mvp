---
# CI/CD for Karaoke-MVP: Build and push all Docker microservices (multi-arch) to DockerHub & GHCR
# - Lints Python code before build
# - Builds each service using its context (no cross-service copy)
# - Pushes images to DockerHub and GitHub Container Registry
# - Sends Telegram notifications on success/failure
# - Runs nightly scheduled builds for freshness

name: Build and Push Docker Images

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch: {}
  schedule:
    - cron: '0 3 * * *'

env:
  DOCKERHUB_USER: nlivestudent

jobs:

  # ----------------------
  # üõ†Ô∏è Preflight Checks
  # ----------------------
  preflight-check:
    name: Preflight Check (${{ matrix.service }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - watcher
          - metadata
          - splitter
          - packager
          - organizer
          - status-api
          - maintenance
          - telegram_youtube_bot

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate .env file exists
        run: |
          if [ ! -f .env ]; then
            echo "‚ùå Missing .env file"
            exit 1
          fi
          echo "‚úÖ .env file present"

      - name: Validate Dockerfile exists
        run: |
          DOCKERFILE="${{ matrix.service }}/Dockerfile"
          if [ ! -f "$DOCKERFILE" ]; then
            echo "‚ùå Dockerfile not found for ${{ matrix.service }}"
            exit 1
          fi
          echo "‚úÖ Dockerfile exists for ${{ matrix.service }}"

      - name: Check Docker target 'final'
        id: targetcheck
        run: |
          if grep -qi "FROM .* as final" "${{ matrix.service }}/Dockerfile"; then
            echo "target_exists=true" >> $GITHUB_OUTPUT
          else
            echo "target_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Docker Build Dry-run
        run: |
          TARGET=""
          if [[ "${{ steps.targetcheck.outputs.target_exists }}" == "true" ]]; then
            TARGET="--target final"
          fi
          docker buildx build \
            --load \
            --progress=plain \
            $TARGET \
            -f "${{ matrix.service }}/Dockerfile" \
            "./${{ matrix.service }}"

      - name: Telegram Notify Success
        if: success()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="‚úÖ Preflight checks passed for *${{ matrix.service }}* on commit [${{ github.sha }}]." \
          -d parse_mode=Markdown

      - name: Telegram Notify Failure
        if: failure()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="‚ùå Preflight checks failed for *${{ matrix.service }}* on commit [${{ github.sha }}]. Please check workflow logs." \
          -d parse_mode=Markdown

  # -----------------------
  # üßπ Lint & Test Python
  # -----------------------
  lint-and-test:
    name: Lint & Test Python (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: preflight-check
    strategy:
      matrix:
        service:
          - watcher
          - metadata
          - splitter
          - packager
          - organizer
          - status-api
          - maintenance
          - telegram_youtube_bot

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install -r ${{ matrix.service }}/requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: flake8 ${{ matrix.service }}/

      # Uncomment to run pytest when ready
      # - name: Run tests
      #   run: pytest ${{ matrix.service }}/

  # -----------------------------
  # üöÄ Build and Push Images
  # -----------------------------
  build-and-push:
    name: Build & Push Docker (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        service:
          - watcher
          - metadata
          - splitter
          - packager
          - organizer
          - status-api
          - maintenance
          - telegram_youtube_bot

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract git tag (if any)
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="latest"
          fi
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKERHUB_USER }}/karaoke-${{ matrix.service }}:latest
            ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:latest
          platforms: linux/amd64,linux/arm64

      - name: Telegram Notify Success
        if: success()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="‚úÖ Docker image built & pushed: *${{ matrix.service }}* as *${{ env.IMAGE_TAG }}*" \
          -d parse_mode=Markdown

      - name: Telegram Notify Failure
        if: failure()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="‚ùå Docker build/push failed for *${{ matrix.service }}*. Check workflow logs." \
          -d parse_mode=Markdown
