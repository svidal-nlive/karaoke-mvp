---
# CI/CD for Karaoke-MVP: Build and push all Docker microservices (multi-arch) to DockerHub & GHCR
# - Lints Python code before build
# - Builds each service using its context (no cross-service copy)
# - Pushes images to DockerHub and GitHub Container Registry
# - Sends Telegram notifications on success/failure
# - Runs nightly scheduled builds for freshness

# .github/workflows/docker-multi-build.yml
# CI/CD for Karaoke-MVP: Multi-service Docker build/push, with Telegram alerts and .env auto-generation

name: Build and Push Docker Images

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch: {}
  schedule:
    - cron: '0 3 * * *'

env:
  DOCKERHUB_USER: nlivestudent

jobs:
  lint-and-test:
    name: Lint & Test Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - watcher
          - metadata
          - splitter
          - packager
          - organizer
          - status-api
          - maintenance
          - telegram_youtube_bot

    steps:
      - uses: actions/checkout@v4

      # --- Generate .env from secrets ---
      - name: Generate .env from GitHub Secrets (CI only)
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> .env

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install -r ${{ matrix.service }}/requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: flake8 ${{ matrix.service }}/

      # Uncomment to run tests, if present
      # - name: Run tests
      #   run: pytest ${{ matrix.service }}/

      # ---- Telegram notification on failure ----
      - name: Notify Failure (Telegram)
        if: failure()
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="❌ Lint/Test failed for ${{ matrix.service }} on branch ${{ github.ref }} (${GITHUB_WORKFLOW})"

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        service:
          - watcher
          - metadata
          - splitter
          - packager
          - organizer
          - status-api
          - maintenance
          - telegram_youtube_bot

    steps:
      - uses: actions/checkout@v4

      # --- Generate .env from secrets ---
      - name: Generate .env from GitHub Secrets (CI only)
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract git tag (if available)
        id: extract_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="latest"
          fi
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKERHUB_USER }}/karaoke-${{ matrix.service }}:latest
            ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:latest
          platforms: linux/amd64,linux/arm64

      # Health check for services exposing HTTP APIs on port 5000
      - name: Health check (port 5000)
        if: |
          matrix.service == 'metadata' ||
          matrix.service == 'watcher' ||
          matrix.service == 'organizer'
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}
          docker run -d --rm -p 5000:5000 --name temp_test $IMAGE
          for i in {1..10}; do
            if curl -s http://localhost:5000/health; then
              echo "Healthcheck passed."
              docker rm -f temp_test >/dev/null 2>&1 || true
              exit 0
            fi
            echo "Waiting for service on port 5000... ($i/10)"
            sleep 1
          done
          echo "Health check failed after waiting. Dumping logs:"
          docker logs temp_test || true
          docker rm -f temp_test >/dev/null 2>&1 || true
          exit 1

      # Health check for status-api (port 5001)
      - name: Health check (status-api on port 5001)
        if: matrix.service == 'status-api'
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/karaoke-status-api:${{ env.IMAGE_TAG }}
          docker run -d --rm -p 5001:5001 --name temp_test_status $IMAGE
          for i in {1..10}; do
            if curl -s http://localhost:5001/health; then
              echo "Healthcheck passed."
              docker rm -f temp_test_status >/dev/null 2>&1 || true
              exit 0
            fi
            echo "Waiting for status-api on port 5001... ($i/10)"
            sleep 1
          done
          echo "Health check failed after waiting. Dumping logs:"
          docker logs temp_test_status || true
          docker rm -f temp_test_status >/dev/null 2>&1 || true
          exit 1

      # ---- Telegram notification on success ----
      - name: Notify Success (Telegram)
        if: success()
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="✅ Docker image ${{ matrix.service }} built and pushed as ${{ env.IMAGE_TAG }} on branch ${{ github.ref }} (${GITHUB_WORKFLOW})"

      # ---- Telegram notification on failure ----
      - name: Notify Failure (Telegram)
        if: failure()
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="❌ Build or push failed for ${{ matrix.service }} on branch ${{ github.ref }} (${GITHUB_WORKFLOW})"
