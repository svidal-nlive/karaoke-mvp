# .github/workflows/docker-multi-build.yml
# CI/CD for Karaoke-MVP: Build, Lint, Test, Push (multi-arch) for all microservices

name: Build and Push Docker Images

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'   # Nightly at 3AM UTC

env:
  DOCKERHUB_USER: nlivestudent  # Change if needed

jobs:
  lint-and-test:
    name: Lint & Test Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - watcher
          - metadata
          - splitter
          - packager
          - organizer
          - status-api
          - maintenance
          - telegram_youtube_bot
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install -r ${{ matrix.service }}/requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: flake8 ${{ matrix.service }}/

      # - name: Run tests
      #   run: pytest ${{ matrix.service }}/

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        service:
          - watcher
          - metadata
          - splitter
          - packager
          - organizer
          - status-api
          - maintenance
          - telegram_youtube_bot

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract git tag (if available)
        id: extract_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="latest"
          fi
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Build and push ${{ matrix.service }} to DockerHub & GHCR
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKERHUB_USER }}/karaoke-${{ matrix.service }}:latest
            ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:latest
          platforms: linux/amd64,linux/arm64

      - name: Health check built image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}

          # Set port based on service
          if [[ "${{ matrix.service }}" == "status-api" ]]; then
            PORT=5001
          else
            PORT=5000
          fi

          # Only run health check for services exposing HTTP APIs
          if [[ "${{ matrix.service }}" == "status-api" || \
                "${{ matrix.service }}" == "metadata" || \
                "${{ matrix.service }}" == "watcher" || \
                "${{ matrix.service }}" == "organizer" ]]; then

            docker run -d --name temp_test -p $PORT:$PORT ghcr.io/${{ github.repository_owner }}/karaoke-${{ matrix.service }}:${{ env.IMAGE_TAG }}

            # Wait for container to be up and respond to healthcheck
            for i in {1..10}; do
              if docker exec temp_test curl -sf http://localhost:$PORT/health; then
                echo "Health check succeeded."
                docker rm -f temp_test
                exit 0
              else
                echo "Waiting for service on port $PORT... ($i/10)"
                sleep 3
              fi
            done

            echo "Health check failed after waiting. Dumping logs:"
            docker logs temp_test
            docker rm -f temp_test
            exit 1
          fi

      - name: Notify Success (Telegram)
        if: ${{ success() }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="✅ Docker image ${{ matrix.service }} built and pushed as ${{ env.IMAGE_TAG }}"

      - name: Notify Failure (Telegram)
        if: ${{ failure() }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="❌ Build or push failed for ${{ matrix.service }} (tag: ${{ env.IMAGE_TAG }})"

