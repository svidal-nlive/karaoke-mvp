# -----------------------------------------------------------------------------
# docker-compose.support.yml
# Karaoke MVP - Support/Ancillary Services Compose
#
# - Runs support/utility services (Deemix, Jellyfin, Prometheus, Grafana, Alertmanager, etc.)
# - Uses named volumes prefixed by ${STACK_PREFIX}.
# - Prometheus/Alertmanager configs are read from ./monitoring.
# - Custom configs for Grafana and Jellyfin supported via ./support/grafana_data and ./support/jellyfin
# -----------------------------------------------------------------------------

version: "3.8"

services:
  ${STACK_PREFIX}_deemix:
    image: registry.gitlab.com/bockiii/deemix-docker:latest
    container_name: ${STACK_PREFIX}_deemix
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    ports:
      - "127.0.0.1:6595:6595"
    volumes:
      - ${STACK_PREFIX}_deemix_config:/config
      - ${STACK_PREFIX}_input:/downloads

  ${STACK_PREFIX}_jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: ${STACK_PREFIX}_jellyfin
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    ports:
      - "127.0.0.1:8096:8096"
    volumes:
      - ${STACK_PREFIX}_jellyfin_config:/config
      - ${STACK_PREFIX}_jellyfin_cache:/cache
      - ${STACK_PREFIX}_input:/media:ro
      - ${STACK_PREFIX}_output:/output:ro
      - ./support/jellyfin:/custom-config:ro   # <-- Custom Jellyfin configs (optional)

  ${STACK_PREFIX}_prometheus:
    image: prom/prometheus:latest
    container_name: ${STACK_PREFIX}_prometheus
    restart: unless-stopped
    user: root
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${STACK_PREFIX}_prometheus_data:/prometheus

  ${STACK_PREFIX}_alertmanager:
    image: prom/alertmanager:latest
    container_name: ${STACK_PREFIX}_alertmanager
    restart: unless-stopped
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./monitoring/alert.rules.yml:/etc/alertmanager/alert.rules.yml:ro
      - ./monitoring/telegram.tmpl:/etc/alertmanager/telegram.tmpl:ro
      - ${STACK_PREFIX}_alertmanager_data:/alertmanager

  ${STACK_PREFIX}_grafana:
    image: grafana/grafana:latest
    container_name: ${STACK_PREFIX}_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - ${STACK_PREFIX}_grafana_data:/var/lib/grafana
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning:ro
      - ./support/grafana_data:/custom-grafana:ro   # <-- Custom Grafana configs (optional)

  # Optional: Telegram Alert Bot (if separate from pipeline)
  # ${STACK_PREFIX}_telegram_alertbot:
  #   image: some/telegram-alert-bot:latest
  #   container_name: ${STACK_PREFIX}_telegram_alertbot
  #   environment:
  #     - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
  #     - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
  #   restart: unless-stopped
  #   depends_on:
  #     - ${STACK_PREFIX}_alertmanager

# -------------------------------
# Named Volumes (with stack prefix)
# -------------------------------
volumes:
  ${STACK_PREFIX}_deemix_config:
  ${STACK_PREFIX}_jellyfin_config:
  ${STACK_PREFIX}_jellyfin_cache:
  ${STACK_PREFIX}_prometheus_data:
  ${STACK_PREFIX}_alertmanager_data:
  ${STACK_PREFIX}_grafana_data:
  # shared volumes from pipeline
  ${STACK_PREFIX}_input:
  ${STACK_PREFIX}_output:
