# -----------------------------------------------------------------------------
# docker-compose.prod.yml
# Karaoke MVP - Production Pipeline Compose
#
# - Runs all core karaoke pipeline services (Redis, watcher, metadata, splitter, packager, organizer, status-api, maintenance, telegram_youtube_bot).
# - Uses ONLY prebuilt images (from Docker Hub or GHCR).
# - Named volumes and service/container prefix via ${STACK_PREFIX}.
# - Ports are mapped only to localhost to avoid conflicts; you are expected to use a reverse proxy.
# - Healthchecks are enabled for all services.
# -----------------------------------------------------------------------------

version: "3.8"

services:
  ${STACK_PREFIX}_redis:
    image: redis:7-alpine
    container_name: ${STACK_PREFIX}_redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"

  ${STACK_PREFIX}_watcher:
    image: ${WATCHER_IMAGE:-ghcr.io/svidal-nlive/karaoke-watcher:latest}
    container_name: ${STACK_PREFIX}_watcher
    restart: unless-stopped
    environment:
      - ENV=production
      - REDIS_HOST=${STACK_PREFIX}_redis
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - INPUT_DIR=/input
      - QUEUE_DIR=/queue
      - LOGS_DIR=/logs
    volumes:
      - ${STACK_PREFIX}_input:/input
      - ${STACK_PREFIX}_queue:/queue
      - ${STACK_PREFIX}_logs:/logs
      - ${STACK_PREFIX}_shared:/shared:ro
    depends_on:
      - ${STACK_PREFIX}_redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.watcher.rule=Host(`watcher.${DOMAIN}`)"

  ${STACK_PREFIX}_metadata:
    image: ${METADATA_IMAGE:-ghcr.io/svidal-nlive/karaoke-metadata:latest}
    container_name: ${STACK_PREFIX}_metadata
    restart: unless-stopped
    environment:
      - ENV=production
      - REDIS_HOST=${STACK_PREFIX}_redis
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - QUEUE_DIR=/queue
      - META_DIR=/metadata/json
      - LOGS_DIR=/logs
    volumes:
      - ${STACK_PREFIX}_queue:/queue
      - ${STACK_PREFIX}_metadata_json:/metadata/json
      - ${STACK_PREFIX}_logs:/logs
      - ${STACK_PREFIX}_shared:/shared:ro
    depends_on:
      - ${STACK_PREFIX}_watcher
      - ${STACK_PREFIX}_redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  ${STACK_PREFIX}_splitter:
    image: ${SPLITTER_IMAGE:-ghcr.io/svidal-nlive/karaoke-splitter:latest}
    container_name: ${STACK_PREFIX}_splitter
    restart: unless-stopped
    environment:
      - ENV=production
      - REDIS_HOST=${STACK_PREFIX}_redis
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - QUEUE_DIR=/queue
      - STEMS_DIR=/stems
      - LOGS_DIR=/logs
      - CHUNK_LENGTH_MS=${CHUNK_LENGTH_MS:-30000}
    volumes:
      - ${STACK_PREFIX}_queue:/queue
      - ${STACK_PREFIX}_stems:/stems
      - ${STACK_PREFIX}_logs:/logs
      - ${STACK_PREFIX}_shared:/shared:ro
      - ${STACK_PREFIX}_models:/models:ro
      - ${STACK_PREFIX}_splitter_tmp:/tmp
    depends_on:
      - ${STACK_PREFIX}_metadata
      - ${STACK_PREFIX}_redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  ${STACK_PREFIX}_packager:
    image: ${PACKAGER_IMAGE:-ghcr.io/svidal-nlive/karaoke-packager:latest}
    container_name: ${STACK_PREFIX}_packager
    restart: unless-stopped
    environment:
      - ENV=production
      - REDIS_HOST=${STACK_PREFIX}_redis
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - STEMS_DIR=/stems
      - META_DIR=/metadata/json
      - OUTPUT_DIR=/output
      - LOGS_DIR=/logs
    volumes:
      - ${STACK_PREFIX}_stems:/stems
      - ${STACK_PREFIX}_metadata_json:/metadata/json
      - ${STACK_PREFIX}_output:/output
      - ${STACK_PREFIX}_logs:/logs
      - ${STACK_PREFIX}_shared:/shared:ro
    depends_on:
      - ${STACK_PREFIX}_splitter
      - ${STACK_PREFIX}_redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  ${STACK_PREFIX}_organizer:
    image: ${ORGANIZER_IMAGE:-ghcr.io/svidal-nlive/karaoke-organizer:latest}
    container_name: ${STACK_PREFIX}_organizer
    restart: unless-stopped
    environment:
      - ENV=production
      - REDIS_HOST=${STACK_PREFIX}_redis
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - OUTPUT_DIR=/output
      - ORG_DIR=/organized
      - META_DIR=/metadata/json
      - LOGS_DIR=/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ${STACK_PREFIX}_output:/output
      - ${STACK_PREFIX}_organized:/organized
      - ${STACK_PREFIX}_logs:/logs
      - ${STACK_PREFIX}_metadata_json:/metadata/json
      - ${STACK_PREFIX}_shared:/shared:ro
    depends_on:
      - ${STACK_PREFIX}_packager
      - ${STACK_PREFIX}_redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  ${STACK_PREFIX}_status_api:
    image: ${STATUS_API_IMAGE:-ghcr.io/svidal-nlive/karaoke-status-api:latest}
    container_name: ${STACK_PREFIX}_status_api
    restart: unless-stopped
    environment:
      - ENV=production
      - REDIS_HOST=${STACK_PREFIX}_redis
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "127.0.0.1:5001:5001"
    volumes:
      - ${STACK_PREFIX}_input:/input
      - ${STACK_PREFIX}_queue:/queue
      - ${STACK_PREFIX}_metadata_json:/metadata/json
      - ${STACK_PREFIX}_stems:/stems
      - ${STACK_PREFIX}_output:/output
      - ${STACK_PREFIX}_organized:/organized
      - ${STACK_PREFIX}_logs:/logs
      - ${STACK_PREFIX}_shared:/shared:ro
    depends_on:
      - ${STACK_PREFIX}_organizer
      - ${STACK_PREFIX}_redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  ${STACK_PREFIX}_maintenance:
    image: ${MAINTENANCE_IMAGE:-ghcr.io/svidal-nlive/karaoke-maintenance:latest}
    container_name: ${STACK_PREFIX}_maintenance
    restart: unless-stopped
    environment:
      - ENV=production
      - REDIS_HOST=${STACK_PREFIX}_redis
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CLEANUP_CRON_SCHEDULE=${CLEANUP_CRON_SCHEDULE:-0 3 * * *}
      - LOGS_DIR=/logs
    volumes:
      - ${STACK_PREFIX}_metadata_json:/metadata/json
      - ${STACK_PREFIX}_stems:/stems
      - ${STACK_PREFIX}_output:/output
      - ${STACK_PREFIX}_queue:/queue
      - ${STACK_PREFIX}_organized:/organized
      - ${STACK_PREFIX}_logs:/logs
      - ${STACK_PREFIX}_shared:/shared:ro
    depends_on:
      - ${STACK_PREFIX}_redis

  ${STACK_PREFIX}_telegram_youtube_bot:
    image: ${TELEGRAM_BOT_IMAGE:-ghcr.io/svidal-nlive/karaoke-telegram_youtube_bot:latest}
    container_name: ${STACK_PREFIX}_telegram_youtube_bot
    restart: unless-stopped
    environment:
      - ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - YTDLP_OUTPUT_DIR=/input
      - METADATA_OUTPUT_DIR=/metadata/json
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - YT_DLP_COOKIES_FILE=${YT_DLP_COOKIES_FILE:-/cookies/cookies.txt}
    volumes:
      - ${STACK_PREFIX}_input:/input
      - ${STACK_PREFIX}_metadata_json:/metadata/json
      - type: bind
        source: ${YT_DLP_COOKIES_DIR:-./cookies}
        target: /cookies
    depends_on:
      - ${STACK_PREFIX}_redis

# -------------------------------
# Named Volumes (with stack prefix)
# -------------------------------
volumes:
  ${STACK_PREFIX}_input:
  ${STACK_PREFIX}_queue:
  ${STACK_PREFIX}_stems:
  ${STACK_PREFIX}_output:
  ${STACK_PREFIX}_organized:
  ${STACK_PREFIX}_splitter_tmp:
  ${STACK_PREFIX}_metadata_json:
  ${STACK_PREFIX}_logs:
  ${STACK_PREFIX}_models:
  ${STACK_PREFIX}_shared:
    driver: local
    driver_opts:
      type: none
      device: ./shared
      o: bind
